// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # + headers - Headers to be sent with the request 
    resource isolated function delete racers/[string racerId]/entry(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/entry`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # + headers - Headers to be sent with the request 
    # + return - Racer status 
    resource isolated function get racers/[string racerId]/entry(map<string|string[]> headers = {}) returns inline_response_200_1|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/entry`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get racers/[string racerId]/practice/average\-temperatures(map<string|string[]> headers = {}) returns inline_response_200_7|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/average-temperatures`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get racers/[string racerId]/practice/rest\-api(map<string|string[]> headers = {}) returns inline_response_200_5|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/rest-api`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get seasons/'3/leaderboard(map<string|string[]> headers = {}, *GetSeasons3LeaderboardQueries queries) returns inline_response_200_8|error {
        string resourcePath = string `/seasons/3/leaderboard`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # + headers - Headers to be sent with the request 
    resource isolated function post racers/[string racerId]/entry(racerId_entry_body payload, map<string|string[]> headers = {}) returns inline_response_200_2|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/entry`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post racers/[string racerId]/practice/rest\-client/time\-trials(map<string|string[]> headers = {}) returns inline_response_201|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/rest-client/time-trials`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # + headers - Headers to be sent with the request 
    resource isolated function post racers/[string racerId]/practice/rest\-client/time\-trials/[string timeTrialId]/laps(json payload, map<string|string[]> headers = {}) returns inline_response_200_3|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/rest-client/time-trials/${getEncodedUri(timeTrialId)}/laps`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # ## Register as a Racer
    # The first step in the race is to register your name and email as a Anypoint Racer.  You need access to the API to do that; request that on the [Home](https://anypoint.mulesoft.com/exchange/portals/anypoint-speedway/ae6d7954-6fc2-4f3e-8777-80ff8aabd859/anypoint-race-api/minor/2.0/pages/home/) page
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post register(register_body payload, map<string|string[]> headers = {}) returns inline_response_200|error {
        string resourcePath = string `/register`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function put racers/[string racerId]/practice/average\-temperatures(practice_averagetemperatures_body payload, map<string|string[]> headers = {}) returns inline_response_200_7|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/average-temperatures`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    resource isolated function put racers/[string racerId]/practice/rest\-api(practice_restapi_body payload, map<string|string[]> headers = {}) returns inline_response_200_6|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/rest-api`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    resource isolated function put racers/[string racerId]/practice/rest\-client/time\-trials/[string timeTrialId]/finish\-line(string payload, map<string|string[]> headers = {}) returns inline_response_200_4|error {
        string resourcePath = string `/racers/${getEncodedUri(racerId)}/practice/rest-client/time-trials/${getEncodedUri(timeTrialId)}/finish-line`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }
}
