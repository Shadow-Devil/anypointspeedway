// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

public type register_body record {
    string displayName;
    string email;
};

public type inline_response_200_3_lap record {
    # lap time in seconds
    decimal duration;
};

public type practice_averagetemperatures_body record {
    # URL of your Racer API
    string endpoint;
    "thousand"|"million"|"billion" scale;
};

public type inline_response_200_5 record {
    # Racer API endpoint
    string endpoint;
    "Active"|"Error"|"Inactive" status;
    # Seconds until Racer API expires
    decimal expires?;
    string detail?;
};

public type inline_response_200_6 record {
    # Racer API endpoint
    string endpoint;
    "Active"|"Error"|"Inactive" status;
    # Seconds until Racer API expires
    decimal expires;
    decimal laps;
    # seconds recorded for last practice race
    decimal time?;
    string 'error?;
};

public type inline_response_200_7 record {
    # Racer API endpoint
    string endpoint;
    "Active"|"Error"|"Inactive" status;
    string detail?;
};

public type inline_response_200_1_results_error record {
    "racer"|"hundredLaps"|"thousandRows"|"millionRows"|"billionRows" tier;
    string message;
};

public type inline_response_200_8 record {
    string banner?;
    inline_response_200_8_scores[] scores;
};

public type inline_response_200_3_trial record {
    decimal laps;
    # trial time in seconds
    decimal duration;
};

public type practice_restapi_body record {
    # URL of your Racer API
    string endpoint;
    @constraint:Int {minValue: 1}
    int laps;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Represents the Queries record for the operation: getSeasons3Leaderboard
public type GetSeasons3LeaderboardQueries record {
    # when the racer parameter is present, the results will be paged so that the racer's position is visible.  If the racer has not completed a race in the given timespan, no results are returned.
    @constraint:String {pattern: re `^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$`}
    string racer?;
    # the minimum rank to return.  The racer parameter takes precedence over paging, so this parameter will be ignored if racer is provided.
    int minRank = 1;
    # the number of results to return
    @constraint:Int {minValue: 1}
    int count = 10;
    "hour"|"day"|"week"|"season" timespan = "season";
};

public type inline_response_200_1_results_time record {
    decimal racer?;
    decimal hundredLaps?;
    decimal thousandRows?;
    decimal millionRows?;
    decimal billionRows?;
};

public type inline_response_200_1_results record {
    inline_response_200_1_results_time time;
    inline_response_200_1_results_error 'error?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type racerId_entry_body record {
    string endpoint;
};

public type inline_response_200_8_scores record {
    string name;
    @constraint:Int {minValue: 1}
    int rank;
    string tier;
    # Seconds to complete
    @constraint:Number {minValue: 0}
    decimal time;
};

public type inline_response_201 record {
    string timeTrialId;
};

public type inline_response_200_1 record {
    string submitted;
    # Racer API endpoint
    string endpoint;
    "Active"|"Complete"|"Error" status;
    inline_response_200_1_results results;
};

public type inline_response_200_2 record {
    string submitted;
    # Racer API endpoint
    string endpoint;
};

public type inline_response_200 record {
    string displayName;
    string email;
    string racerId;
    string clientId;
};

public type inline_response_200_3 record {
    # your new race token
    string token;
    inline_response_200_3_lap lap;
    inline_response_200_3_trial trial;
};

public type inline_response_200_4 record {
    inline_response_200_3_trial trial;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:CredentialsConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};
